/*
 * (C) Copyright 1996- ECMWF.
 *
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
 * In applying this licence, ECMWF does not waive the privileges and immunities
 * granted to it by virtue of its status as an intergovernmental organisation
 * nor does it submit to any jurisdiction.
 */

#include <cmath>
#include <fstream>
#include "eckit/testing/Test.h"
#include "gribjump/GribInfo.h"
#include "gribjump/GribHandleData.h"
using namespace eckit::testing;

namespace gribjump {
namespace test {

using Range = std::pair<size_t, size_t>; // change this with ccsds
const size_t expectedNumberOfValues = 6599680; // O1280

const std::vector<size_t> o1280_offsets = {
0,28997,59317,91510,123011,154022,185557,220113,255862,291702,326168,361640,398947,436587,474653,514121,551454,589697,628636,668551,709399,749025,788916,827922,868366,911173,955541,1001156,1048286,1095464,1142632,1189693,1236805,1282548,1329134,1377941,1427126,1477006,
1526473,1575581,1625494,1676936,1728477,1779597,1829829,1880093,1929732,1980150,2031121,2082457,2133648,2184079,2235134,2286520,2337145,2387695,2437038,2487592,2536996,2586218,2636159,2686090,2736622,2787330,2838293,2888528,2937904,2986742,3036229,3085810,3133984,
3182679,3231525,3279684,3329838,3378729,3428794,3478941,3528483,3576484,3625747,3676366,3726601,3777167,3827391,3878382,3929814,3980364,4030510,4079535,4128979,4178529,4227719,4277044,4327115,4378361,4429463,4479797,4529373,4579170,4627783,4676777,4725355,4773969,
4822828,4871475,4919714,4967496,5014577,5061372,5107324,5152335,5196525,5240104,5284624,5329344,5373215,5416985,5461091,5505457,5549742,5595697,5641365,5685782,5731389,5776283,5820196,5862184,5904112,5947568,5992263,6036576,6081033,6127689,6172759,6217214,6262199,
6307806,6354845,6400929,6447508,6495067,6542419,6589918,6637426,6686228,6735198,6783515,6832010,6879612,6927509,6976334,7025087,7072612,7120931,7168433,7217647,7266395,7315728,7365246,7415467,7465142,7515373,7565525,7615873,7667462,7718798,7770749,7822768,7874691,
7926170,7977959,8029578,8080563,8131308,8181895,8232583,8284052,8335142,8385906,8437155,8488907,8540572,8591863,8643925,8696486,8749049,8802231,8855248,8907628,8959254,9010849,9063144,9114937,9166661,9218008,9269764,9320655,9372656,9425280,9477883,9530131,9581972,
9632937,9685206,9735954,9787309,9838486,9891171,9943324,9995577,10048999,10100696,10152111,10204838,10255525,10307655,10358710,10410446,10461111,10512314,10564377,10615550,10667079,10718686,10769323,10820640,10872674,10924670,10976160,11026075,11076245,11127515,
11178632,11230017,11279510,11330519,11380877,11431575,11482661,11533724,11584787,11635497,11686171,11736773,11787726,11838150,11888451,11938872,11990093,12041531,12092914,12144558,12195880,12248051,12300253,12352565,12404349,12456142,12507949,12559647,12611840,12663557,
12715220,12767082,12818347,12868796,12919790,12971280,13023113,13075402,13127771,13180446,13233135,13286111,13339369,13392181,13444186,13496864,13549463,13602379,13654829,13707607,13760998,13813572,13865822,13918195,13970437,14022873,14075718,14127350,14179761,14231605,
14284177,14336289,14387875,14440149,14492287,14544067,14596682,14648602,14700124,14751599,14803284,14855054,14906116,14957578,15009141,15061996,15114114,15165724,15218468,15270441,15323307,15375749,15427471,15480736,15533213,15585296,15638064,15690654,15742912,15796458,
15849988,15902894,15957499,16011766,16066341,16120747,16174289,16229347,16282953,16337370,16391626,16444771,16498180,16551769,16605777,16659974,16713064,16767011,16821139,16872907,16927208,16981274,17033358,17086583,17140265,17194701,17247079,17300837,17355156,17408591,
17462135,17516831,17571059,17624229,17678737,17733827,17786889,17841297,17896613,17949062,18003061,18057377,18110894,18164231,18218205,18272161,18323973,18377836,18432255,18486365,18539690,18594502,18648954,18703213,18755575,18809800,18864580,18918267,18970410,19024804,
19079941,19134871,19188291,19241826,19297061,19352493,19407025,19460435,19515751,19571393,19626961,19680758,19735840,19791327,19846961,19902163,19957000,20013159,20069356,20124008,20178285,20234206,20290010,20343996,20400131,20456557,20511054,20567094,20622776,20677742,
20733981,20790452,20845756,20901654,20957571,21012596,21068551,21124400,21180325,21235800,21291574,21346932,21401364,21456293,21511131,21566121,21620300,21675648,21730915,21786165,21840430,21894922,21950011,22003877,22058495,22112686,22166137,22220964,22274982,22328584,
22382114,22436183,22489221,22542595,22596033,22649569,22702839,22756013,22810136,22863304,22917316,22971460,23025739,23079906,23133968,23186587,23240959,23294626,23348944,23402409,23456685,23510896,23564045,23617741,23670511,23723836,23776881,23829945,23883217,23936352,
23989903,24042918,24097811,24152477,24206944,24261761,24317207,24371867,24426728,24481446,24535199,24588171,24641457,24695035,24748705,24802849,24856153,24909025,24962348,25015319,25066508,25118737,25171029,25223950,25276987,25330087,25384083,25437310,25491630,25545072,
25598262,25651761,25705708,25759931,25814278,25867161,25921892,25977422,26031830,26087058,26142025,26196868,26251657,26305699,26360349,26414793,26468871,26523190,26576448,26628704,26681474,26733947,26786720,26838562,26889517,26939892,26990032,27040182,27090906,27139753,
27190097,27240095,27290238,27341049,27391678,27442710,27492061,27542644,27592683,27643065,27693701,27744852,27795941,27846972,27898834,27950505,28002139,28052990,28103496,28155204,28207126,28258685,28308694,28359004,28408693,28458192,28508103,28557015,28606515,28654927,
28703215,28752376,28800395,28849138,28897256,28945862,28994482,29043638,29092330,29140249,29188355,29236833,29286249,29336414,29386052,29435869,29484829,29534420,29584940,29634732,29684611,29735221,29786623,29836753,29886519,29936704,29985097,30033600,30080286,30127824,
30175334,30222358,30268754,30316324,30363231,30411463,30458668,30506171,30554262,30601687,30649837,30698185,30746386,30794022,30841925,30890432,30938079,30986265,31035740,31084723,31133644,31183966,31233074,31283733,31333450,31383919,31432657,31482070,31532775,31582973,
31633803,31684372,31734286,31783687,31833337,31883406,31932935,31982965,32034207,32085082,32135205,32183757,32232701,32282084,32331635,32381761,32431887,32482660,32533830,32584916,32635826,32686584,32737332,32788196,32839349,32890023,32939937,32989996,33040353,33091501,
33142416,33193327,33244948,33296412,33348309,33399121,33450390,33501908,33553638,33605474,33656979,33708468,33759863,33811082,33862746,33914610,33966346,34017331,34068649,34119338,34169862,34220918,34271799,34322987,34374273,34424689,34474952,34525175,34574846,34625236,
34675738,34725339,34775172,34825632,34876336,34926694,34976972,35026752,35076917,35127011,35176199,35226368,35275807,35325980,35376271,35425935,35475904,35525600,35574370,35624524,35673420,35722974,35772802,35822595,35871983,35920579,35969318,36017758,36065732,36112829,
36160357,36207835,36254880,36302130,36348566,36395384,36441628,36487469,36533456,36579452,36624760,36668680,36713972,36758827,36802659,36848026,36892095,36934681,36978294,37021461,37063435,37105753,37149829,37193747,37236515,37281064,37324926,37365707,37409616,37452989,
37494968,37538312,37581144,37622791,37666070,37709318,37752315,37793669,37836346,37878351,37920541,37963409,38005601,38048028,38089694,38130114,38172532,38213023,38252873,38294808,38335085,38373931,38414728,38454772,38493457,38533713,38572960,38612061,38651773,38691910,
38731167,38771837,38812009,38851744,38892628,38932005,38972551,39012579,39052080,39093085,39133296,39174530,39215919,39256523,39297186,39336948,39377220,39416630,39456517,39496056,39535282,39574363,39612572,39652058,39692059,39731417,39771019,39810471,39849663,39888660,
39927955,39968228,40008070,40047876,40087321,40127037,40167684,40208267,40248819,40289383,40330688,40371309,40411545,40452304,40492637,40534307,40575889,40618402,40661682,40706107,40749934,40793654,40836809,40879142,40922412,40965281,41008244,41050678,41093093,41134261,
41175828,41216441,41255357,41293759,41333013,41371640,41408917,41445100,41479757,41515411,41552860,41591463,41627430,41663401,41698302,41731835,41766161,41797401,41830947,41865092,41898711,41934215,41966673,41997747,42032696,42072310,42109850
};

std::vector<double> getComparisonValues(eckit::PathName comparisonFileName, size_t expectedNumberOfValues) {
    std::ifstream comparisonFile(comparisonFileName);
    std::string line;
    std::vector<double> comparisonValues;
    comparisonValues.reserve(expectedNumberOfValues);
    while (std::getline(comparisonFile, line)) {
        std::stringstream lineStream(line);
        std::string value;
        // expect exactly 5 values per line
        for (int i = 0; i < 5; i++) {
            std::getline(lineStream, value, ',');
            comparisonValues.push_back(std::stod(value));
        }
    }
    EXPECT(comparisonValues.size() == expectedNumberOfValues);
    return comparisonValues;
}

void test(eckit::PathName gribname, eckit::PathName comparename){
// a comma separated list of values, 5 values per line
    const std::vector<double> comparisonValues = getComparisonValues(comparename, expectedNumberOfValues);
    std::cout << "Got comparison values" << std::endl;
    // check the values
    eckit::PathName binName = "temp";
    JumpHandle dataSource(gribname);
    std::cout << "Made JumpHandle" << std::endl;
    std::vector<JumpInfo*> infos = dataSource.extractInfoFromFile();  
    JumpInfo gribInfo = *infos.back();
    std::cout << "Made JumpInfo" << std::endl;
    EXPECT(gribInfo.getNumberOfDataPoints() == expectedNumberOfValues);

    // Big ranges
    std::vector<Range> ranges = {
        Range(0, 10000),  
        Range(100000, 110000), 
        Range(200000, 210000),
        Range(300000, 310000), Range(400000, 410000), Range(500000, 510000),
        // and read towards the end
        Range(6500000, 6510000),Range(6520000, 6530000),Range(6550000, 6560000),
        Range(6560000, expectedNumberOfValues),
    };

    ExtractionResult output = gribInfo.extractRanges(dataSource, ranges);
    auto values = output.values();
    
    EXPECT(values.size() == ranges.size());

    // compare the values
    // small epsilon from grib_dump valueq
    const double epsilon = 1e-2;
    for (size_t i = 0; i < values.size(); i++) {
        size_t range0 = std::get<0>(ranges[i]);
        size_t range1 = std::get<1>(ranges[i]);
        EXPECT(values[i].size() == range1 - range0);
        for (size_t j = 0; j < values[i].size(); j++) {
            if (std::isnan(values[i][j])) {
                EXPECT(comparisonValues[range0 + j] == 9999); // comparison file has 9999 for missing values
                continue;
            }
            //std::cout << "values[" << i << "][" << j << "] = " << values[i][j] << std::endl;
            //std::cout << "comparisonValues[" << range0 + j << "] = " << comparisonValues[range0 + j] << std::endl;
            double delta = std::abs(values[i][j] - comparisonValues[range0 + j]);
            EXPECT(delta < epsilon);
        }
    }

    // Now, read 50 single points
    std::vector<Range> singlePoints;
    for (size_t i = 0; i < 50; i++) {
        size_t r0 = i*10000;
        singlePoints.push_back(Range(r0, r0+1));
    }
    // Plus the last one
    singlePoints.push_back(Range(expectedNumberOfValues-1, expectedNumberOfValues));

    output = gribInfo.extractRanges(dataSource, singlePoints);
    values = output.values();

    EXPECT(values.size() == singlePoints.size());

    // compare the values
    for (size_t i = 0; i < values.size(); i++) {
        size_t range0 = std::get<0>(singlePoints[i]);
        size_t range1 = std::get<1>(singlePoints[i]);
        EXPECT(values[i].size() == range1 - range0);
        for (size_t j = 0; j < values[i].size(); j++) {
            if (std::isnan(values[i][j])) {
                EXPECT(comparisonValues[range0 + j] == 9999); // comparison file has 9999 for missing values
                continue;
            }
            double delta = std::abs(values[i][j] - comparisonValues[range0 + j]);
            EXPECT(delta < epsilon);
        }
    }

}

CASE( "test_2t_O1280" ) {
    // this is grid_simple, grib 1, no bitmask.
    test("2t_O1280.grib", "2t_O1280.values");
    
}
CASE( "test_ceil_O1280" ) {
    // this is grid_ccsds, grib 2, with bitmask.
    test("ceil_O1280.grib", "ceil_O1280.values");    
}

CASE( "test_ceil_offsets" ) {
    // this is grid_ccsds, grib 2, with bitmask.
    eckit::PathName gribname = "ceil_O1280.grib";
    JumpHandle dataSource(gribname);
    std::cout << "Made JumpHandle" << std::endl;
    std::vector<JumpInfo*> infos = dataSource.extractInfoFromFile();

    JumpInfo gribInfo = *infos.back();

    // NOTE: These offsets were originally obtained from GribInfo
    // TODO: Verify they are correct with an independent tool...
    std::vector<size_t> offsets = gribInfo.getCcsdsOffsets();
    EXPECT(offsets.size() == o1280_offsets.size());
    EXPECT(offsets == o1280_offsets);
}

}  // namespace test
}  // namespace gribjump

int main(int argc, char **argv)
{
    // print the current directoy
    return run_tests ( argc, argv );
}
